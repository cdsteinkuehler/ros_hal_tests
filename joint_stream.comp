/******************************************************************************
 *
 * Copyright (C) 2015 Charles Steinkuehler (charles AT steinkuehler DOT net)
 *
 ******************************************************************************
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 * THE AUTHORS OF THIS PROGRAM ACCEPT ABSOLUTELY NO LIABILITY FOR
 * ANY HARM OR LOSS RESULTING FROM ITS USE.  IT IS _EXTREMELY_ UNWISE
 * TO RELY ON SOFTWARE ALONE FOR SAFETY.  Any machinery capable of
 * harming persons must have provisions for completely removing power
 * from all motors, etc, before persons enter any danger area.  All
 * machinery must be designed to comply with local and national safety
 * codes, and the authors of this software can not, and do not, take
 * any responsibility for such compliance.
 *
 * This code was written as part of the Machinekit project.  For more
 * information, go to www.machinekit.io
 *
 ******************************************************************************/

component joint_stream "Machinekit HAL component for streaming joint positions from ROS";
pin out float joint.##.pos-cmd [6] "Per-joint commanded position";
pin out u32 underrun   "number of failed read attempts";
pin out u32 received   "number of successful read attempts";
pin out u32 tooslow    "number of times the reader couldnt keep up with the writer";
pin out u32 avail      "number of bytes (valid data) currently available in the buffer";

function _;

option singleton yes;
option rtapi_app no;

license "GPLv2 or later";

description """
Streams joint positions from a ring-buffer to HAL pins
.LP
The `personality' value is the number of joints to control
.LP
ToDo more detail goes here
""";

;;


#define MAXSIZE 1024

#include "hal_priv.h"
#include "hal_ring.h"	        /* ringbuffer declarations */

static char *ring = "ring_0";
RTAPI_MP_STRING(ring,  "name of ring to attach");

static ringbuffer_t rb;
static ringiter_t ri;
static char *name = "joint_stream";

FUNCTION(_) {
    ringvec_t vec[2];
    size_t size;
    const void *data;
    const float *dataf;
    float buf[6];

    if (record_read(&rb, (void*)&data, &size) == 0) {
        // Copy data to output
        // dataf = data;
        memcpy(buf, data, size > sizeof(buf) ? sizeof(buf) : size);
        joint_pos_cmd(0) = buf[0];
        

        // consume record
        record_shift(&rb);
        received++;
    } else {
	// ring empty
	underrun++;
	return;
    }

    if (rb.scratchpad) {
        rtapi_snprintf(rb.scratchpad,ring_scratchpad_size(&rb),
    		   "received=%d underrun=%d",
    		   received, underrun);
    }
}

int rtapi_app_main(void)
{
    int retval;

    comp_id = hal_init(name);
    if (comp_id < 0) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_init() failed: %d\n",
			name, comp_id);
	return -1;
    }
    if ((retval = hal_ring_attach(ring, &rb,NULL))) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_attach(%s) failed: %d\n",
			name, ring, retval);
	return -1;
    }

    rtapi_print_msg(RTAPI_MSG_INFO,
		    "%s: attached ring '%s' size=%zu type=%d"
		    " rmutex=%d wmutex=%d reader=%d writer=%d scratchpad=%zu\n",
		    name, ring, rb.header->size,
		    rb.header->type,
		    ring_use_rmutex(&rb), ring_use_wmutex(&rb),
		    rb.header->reader, rb.header->writer,
		    ring_scratchpad_size(&rb));

    rb.header->reader = comp_id;
    rb.header->reader_instance = rtapi_instance;

    record_iter_init(&rb, &ri);

    if ((retval = export(name, 0))) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: export(%s) failed: %d\n",
			name, name, retval);
	return -1;
    }
    hal_ready(comp_id);
    return 0;
}

void rtapi_app_exit(void)
{
    int retval;
    rb.header->reader = 0;
    if ((retval = hal_ring_detach(ring, &rb)) < 0)
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_detach(%s) failed: %d\n",
			name, ring, retval);
    hal_exit(comp_id);
}

